[{"name":"Parser.Error","comment":"\n\n@docs renderError, Output, DeadEnd\n\n\n## Extraction\n\n@docs Extract, forParser, forParserAdvanced, Expected\n\n\n## Utilities\n\n@docs problemToExpected\n\n","unions":[{"name":"Expected","comment":" A problem is often of the form \"expected `something`\". This type is used to group those together.\n","args":[],"cases":[["Expected",["String.String"]],["Other",["String.String"]]]}],"aliases":[{"name":"DeadEnd","comment":" A type which encompasses both `Parser.DeadEnd` and `Parser.Advanced.DeadEnd`.\n","args":["inner","problem"],"type":"{ inner | row : Basics.Int, col : Basics.Int, problem : problem }"},{"name":"Extract","comment":" Describes how to get the context stack from a `DeadEnd` and how to extract expectations information from a problem.\n\nYou can usually use `forParser` and `forParserAdvanced`.\n\n","args":["inner","problem"],"type":"{ contextStack : Parser.Error.DeadEnd inner problem -> List.List { row : Basics.Int, col : Basics.Int, context : String.String }, problemToString : problem -> Parser.Error.Expected }"},{"name":"Output","comment":" Describes how to output the various parts of the error message.\n","args":["out"],"type":"{ text : String.String -> out, formatCaret : out -> out, newline : out, formatContext : out -> out, linesOfExtraContext : Basics.Int }"}],"values":[{"name":"forParser","comment":" And `Extract` for the basic `Parser.DeadEnd`.\n","type":"Parser.Error.Extract {} Parser.Problem"},{"name":"forParserAdvanced","comment":" And `Extract` for `Parser.Advanced.DeadEnd` when the problem is a `Parser.Problem`.\n","type":"Parser.Error.Extract { contextStack : List.List { row : Basics.Int, col : Basics.Int, context : String.String } } Parser.Problem"},{"name":"problemToExpected","comment":" Categorize a `Problem` in whether it's \"expected `something`\" or something else.\n","type":"Parser.Problem -> Parser.Error.Expected"},{"name":"renderError","comment":" Render a list of `DeadEnd`s.\n\nThe `String` is the input to the parser.\n\nThis returns a list of \"pieces\", look at the README for examples of how to combine them.\n\n","type":"Parser.Error.Output out -> Parser.Error.Extract inner problem -> String.String -> List.List (Parser.Error.DeadEnd inner problem) -> List.List out"}],"binops":[]}]